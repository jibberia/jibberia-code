#!/usr/bin/env python

import sys, os

args = sys.argv

DEFAULT_PREFIX = '$s'

def usage():
    script_name = 'rng' # args[0]
    print "usage: %s [-nh] [--help] [non-int prefix] N N or N,N,N or N:N or N-N or N..N" % (script_name)
    print "            -n  means \"only print numbers\""
    print "     -h,--help  prints usage and quits"
    print
    print "This program makes ordered sets of numbers from shorthand notation, and"
    print "checks whether they are all environment variables (when combined with a"
    print "prefix (optional arg, default='$s'), and then checks whether each env var"
    print "points to a valid file. Output is as useful as possible: file paths, if all"
    print "exist; then environment variable names, if all exist or the user explicitly"
    print "supplies a prefix; then just numbers."
    print
    print "Examples:"
    print "  $ %s h 1-3 8" % (script_name)
    print "      -> \"path1 path2 path3 path8\""
    print "          (if $h1 is a path to a valid file, and $h2 is, and so on)"
    print "    OR"
    print "      -> \"h1 h2 h3 h8\""
    print "          (if any file cannot be found"
    print
    print " $ %s 1,2,3,8:3,6-4 11..10" % (script_name)
    print "      -> [file paths], if all values of ($s1 $s2 $s3 $s4 $s5 $s6 $s7 $s8 $s10 $s11)"
    print "                       evaluate to paths to files, or"
    print "      -> \"1 2 3 4 5 6 7 8 10 11\""

    raise SystemExit


if len(args) <= 1:
    usage()
args = args[1:]

# look for flagged args
just_numbers = False
while args[0].startswith('-'):
    flag = args[0]
    if flag == '-n':
        just_numbers = True
    elif flag == '-h' or flag == '--help':
        usage()
    args = args[1:]

#def is_bound(s):
#    vals = nums_from_bound(s) #                                    recursion
#    if len(vals) > 0:
#        return True
#    return False
        
# check whether first arg is a prefix
prefix = DEFAULT_PREFIX
#if not is_bound(args[0]):
#    prefix = args[0]
#    while prefix.startswith("\\"):
#        prefix = prefix[1:]
#    args = args[1:]

# 1 2,3:5-4
# build list of given numbers
out = []
avoid = []
for s in args:
    #vals = nums_from_bound(arg)
    target = out
    if s.startswith('-'):
        target = avoid
        s = s[1:]
    try:
        target.extend([int(s),])
        continue
        #                                                    return
    except ValueError, e:
        if ',' in s:
            ret = []
            vals = s.split(',')
            for val in vals:
                nums = nums_from_bound(val) #                       recursion
                ret.extend(nums)
            target.extend(ret)
            continue #                                       return
        default_range_delimiter = ':'
        range_delimiters = ('..',)
        for delim in range_delimiters:
            s = s.replace(delim, ':')

        if not default_range_delimiter in s:
            # print "INVALID ARG"
            try:
                stripped = ''.join([l for l in s if l in "0123456789"])
                val = int(stripped)
                val = [val,] #                               return
                target.extend([val,])
            except:
                continue
            continue #                                       return

        bounds = s.split(':')
        n_bounds = len(bounds)
        if n_bounds == 0:
            continue #                                       return
        elif n_bounds == 1:
            val = int(bounds[0])
            target.extend([val,]) #                          return
            continue
        elif n_bounds == 2 and '' not in bounds:
            lower = int(bounds[0])
            upper = int(bounds[1])
            if upper < lower:
                tmp = lower
                lower = upper
                upper = tmp
            vals = range(lower, upper + 1)
            target.extend(vals)
            continue  #                                      return


    #print "            vals =", vals
    #out.extend(vals)

try:
    numbers = [int(n) for n in out if n not in [int(foe) for foe in avoid]]
except:
    print
    raise SystemExit
#print numbers
numbers.sort()
numbers = list(set(numbers))
numbers.sort()
if just_numbers:
    print ' '.join([str(n) for n in numbers])
    raise SystemExit
#print "prefix", prefix
env_vars = [prefix + str(bound) for bound in numbers]

all_env_var_names = os.environ.keys()

env_keys = [k.replace('$', '') for k in env_vars]
valid_env_keys = [v for v in env_keys if v in all_env_var_names]

selected_file_paths = [os.environ[k] for k in valid_env_keys]

#if len(selected_file_paths) > 0:
if len(env_keys) == len(selected_file_paths):
    # check that files exist
    exists = True
    for path in selected_file_paths:
        if not os.path.exists(path):
            exists = False
            break
    if exists:
        print ' '.join(selected_file_paths)
        raise SystemExit

if prefix != DEFAULT_PREFIX:
    print ' '.join(env_vars)
else:
    print ' '.join([str(n) for n in numbers])

